// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osier_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osier_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osier_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osier_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osier_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osier_5fserver_2eproto;
class CreateRequest;
class CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
class CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class DetailResponse;
class DetailResponseDefaultTypeInternal;
extern DetailResponseDefaultTypeInternal _DetailResponse_default_instance_;
class EmptyMessage;
class EmptyMessageDefaultTypeInternal;
extern EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListResponse;
class ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class NameMessage;
class NameMessageDefaultTypeInternal;
extern NameMessageDefaultTypeInternal _NameMessage_default_instance_;
class ServerStatusResponse;
class ServerStatusResponseDefaultTypeInternal;
extern ServerStatusResponseDefaultTypeInternal _ServerStatusResponse_default_instance_;
class SimpleResponse;
class SimpleResponseDefaultTypeInternal;
extern SimpleResponseDefaultTypeInternal _SimpleResponse_default_instance_;
class TaskMessage;
class TaskMessageDefaultTypeInternal;
extern TaskMessageDefaultTypeInternal _TaskMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CreateRequest* Arena::CreateMaybeMessage<::CreateRequest>(Arena*);
template<> ::CreateResponse* Arena::CreateMaybeMessage<::CreateResponse>(Arena*);
template<> ::DetailResponse* Arena::CreateMaybeMessage<::DetailResponse>(Arena*);
template<> ::EmptyMessage* Arena::CreateMaybeMessage<::EmptyMessage>(Arena*);
template<> ::ListRequest* Arena::CreateMaybeMessage<::ListRequest>(Arena*);
template<> ::ListResponse* Arena::CreateMaybeMessage<::ListResponse>(Arena*);
template<> ::NameMessage* Arena::CreateMaybeMessage<::NameMessage>(Arena*);
template<> ::ServerStatusResponse* Arena::CreateMaybeMessage<::ServerStatusResponse>(Arena*);
template<> ::SimpleResponse* Arena::CreateMaybeMessage<::SimpleResponse>(Arena*);
template<> ::TaskMessage* Arena::CreateMaybeMessage<::TaskMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TaskMessage_TaskStatus : int {
  TaskMessage_TaskStatus_Wait = 0,
  TaskMessage_TaskStatus_Doing = 1,
  TaskMessage_TaskStatus_Done = 2,
  TaskMessage_TaskStatus_Error = 3,
  TaskMessage_TaskStatus_TaskMessage_TaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskMessage_TaskStatus_TaskMessage_TaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskMessage_TaskStatus_IsValid(int value);
constexpr TaskMessage_TaskStatus TaskMessage_TaskStatus_TaskStatus_MIN = TaskMessage_TaskStatus_Wait;
constexpr TaskMessage_TaskStatus TaskMessage_TaskStatus_TaskStatus_MAX = TaskMessage_TaskStatus_Error;
constexpr int TaskMessage_TaskStatus_TaskStatus_ARRAYSIZE = TaskMessage_TaskStatus_TaskStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskMessage_TaskStatus_descriptor();
template<typename T>
inline const std::string& TaskMessage_TaskStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskMessage_TaskStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskMessage_TaskStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskMessage_TaskStatus_descriptor(), enum_t_value);
}
inline bool TaskMessage_TaskStatus_Parse(
    const std::string& name, TaskMessage_TaskStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskMessage_TaskStatus>(
    TaskMessage_TaskStatus_descriptor(), name, value);
}
// ===================================================================

class ServerStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerStatusResponse) */ {
 public:
  ServerStatusResponse();
  virtual ~ServerStatusResponse();

  ServerStatusResponse(const ServerStatusResponse& from);
  ServerStatusResponse(ServerStatusResponse&& from) noexcept
    : ServerStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServerStatusResponse& operator=(const ServerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusResponse& operator=(ServerStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServerStatusResponse*>(
               &_ServerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerStatusResponse& a, ServerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusResponse* New() const final {
    return CreateMaybeMessage<ServerStatusResponse>(nullptr);
  }

  ServerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusResponse& from);
  void MergeFrom(const ServerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreNumFieldNumber = 1,
    kCurrentNumFieldNumber = 2,
    kCurrentTaskFieldNumber = 3,
  };
  // int32 core_num = 1;
  void clear_core_num();
  ::PROTOBUF_NAMESPACE_ID::int32 core_num() const;
  void set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_core_num() const;
  void _internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_num = 2;
  void clear_current_num();
  ::PROTOBUF_NAMESPACE_ID::int32 current_num() const;
  void set_current_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_num() const;
  void _internal_set_current_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_task = 3;
  void clear_current_task();
  ::PROTOBUF_NAMESPACE_ID::int32 current_task() const;
  void set_current_task(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_task() const;
  void _internal_set_current_task(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 core_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class EmptyMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EmptyMessage) */ {
 public:
  EmptyMessage();
  virtual ~EmptyMessage();

  EmptyMessage(const EmptyMessage& from);
  EmptyMessage(EmptyMessage&& from) noexcept
    : EmptyMessage() {
    *this = ::std::move(from);
  }

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMessage& operator=(EmptyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyMessage* internal_default_instance() {
    return reinterpret_cast<const EmptyMessage*>(
               &_EmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmptyMessage& a, EmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyMessage* New() const final {
    return CreateMaybeMessage<EmptyMessage>(nullptr);
  }

  EmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EmptyMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EmptyMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SimpleResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimpleResponse) */ {
 public:
  SimpleResponse();
  virtual ~SimpleResponse();

  SimpleResponse(const SimpleResponse& from);
  SimpleResponse(SimpleResponse&& from) noexcept
    : SimpleResponse() {
    *this = ::std::move(from);
  }

  inline SimpleResponse& operator=(const SimpleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleResponse& operator=(SimpleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleResponse* internal_default_instance() {
    return reinterpret_cast<const SimpleResponse*>(
               &_SimpleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimpleResponse& a, SimpleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleResponse* New() const final {
    return CreateMaybeMessage<SimpleResponse>(nullptr);
  }

  SimpleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleResponse& from);
  void MergeFrom(const SimpleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpleResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SimpleResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRequest) */ {
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const final {
    return CreateMaybeMessage<CreateRequest>(nullptr);
  }

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBaseDirFieldNumber = 3,
    kUsernameFieldNumber = 5,
    kPriorityFieldNumber = 2,
    kCoreNumFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string base_dir = 3;
  void clear_base_dir();
  const std::string& base_dir() const;
  void set_base_dir(const std::string& value);
  void set_base_dir(std::string&& value);
  void set_base_dir(const char* value);
  void set_base_dir(const char* value, size_t size);
  std::string* mutable_base_dir();
  std::string* release_base_dir();
  void set_allocated_base_dir(std::string* base_dir);
  private:
  const std::string& _internal_base_dir() const;
  void _internal_set_base_dir(const std::string& value);
  std::string* _internal_mutable_base_dir();
  public:

  // string username = 5;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 core_num = 4;
  void clear_core_num();
  ::PROTOBUF_NAMESPACE_ID::int32 core_num() const;
  void set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_core_num() const;
  void _internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 core_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TaskMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaskMessage) */ {
 public:
  TaskMessage();
  virtual ~TaskMessage();

  TaskMessage(const TaskMessage& from);
  TaskMessage(TaskMessage&& from) noexcept
    : TaskMessage() {
    *this = ::std::move(from);
  }

  inline TaskMessage& operator=(const TaskMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskMessage& operator=(TaskMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskMessage* internal_default_instance() {
    return reinterpret_cast<const TaskMessage*>(
               &_TaskMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskMessage& a, TaskMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskMessage* New() const final {
    return CreateMaybeMessage<TaskMessage>(nullptr);
  }

  TaskMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskMessage& from);
  void MergeFrom(const TaskMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaskMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TaskMessage_TaskStatus TaskStatus;
  static constexpr TaskStatus Wait =
    TaskMessage_TaskStatus_Wait;
  static constexpr TaskStatus Doing =
    TaskMessage_TaskStatus_Doing;
  static constexpr TaskStatus Done =
    TaskMessage_TaskStatus_Done;
  static constexpr TaskStatus Error =
    TaskMessage_TaskStatus_Error;
  static inline bool TaskStatus_IsValid(int value) {
    return TaskMessage_TaskStatus_IsValid(value);
  }
  static constexpr TaskStatus TaskStatus_MIN =
    TaskMessage_TaskStatus_TaskStatus_MIN;
  static constexpr TaskStatus TaskStatus_MAX =
    TaskMessage_TaskStatus_TaskStatus_MAX;
  static constexpr int TaskStatus_ARRAYSIZE =
    TaskMessage_TaskStatus_TaskStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskStatus_descriptor() {
    return TaskMessage_TaskStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskStatus_Name.");
    return TaskMessage_TaskStatus_Name(enum_t_value);
  }
  static inline bool TaskStatus_Parse(const std::string& name,
      TaskStatus* value) {
    return TaskMessage_TaskStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBaseDirFieldNumber = 3,
    kUsernameFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kFinishedAtFieldNumber = 7,
    kMsgFieldNumber = 10,
    kPriorityFieldNumber = 2,
    kCoreNumFieldNumber = 4,
    kStatusFieldNumber = 8,
    kIdFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string base_dir = 3;
  void clear_base_dir();
  const std::string& base_dir() const;
  void set_base_dir(const std::string& value);
  void set_base_dir(std::string&& value);
  void set_base_dir(const char* value);
  void set_base_dir(const char* value, size_t size);
  std::string* mutable_base_dir();
  std::string* release_base_dir();
  void set_allocated_base_dir(std::string* base_dir);
  private:
  const std::string& _internal_base_dir() const;
  void _internal_set_base_dir(const std::string& value);
  std::string* _internal_mutable_base_dir();
  public:

  // string username = 5;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string created_at = 6;
  void clear_created_at();
  const std::string& created_at() const;
  void set_created_at(const std::string& value);
  void set_created_at(std::string&& value);
  void set_created_at(const char* value);
  void set_created_at(const char* value, size_t size);
  std::string* mutable_created_at();
  std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string finished_at = 7;
  void clear_finished_at();
  const std::string& finished_at() const;
  void set_finished_at(const std::string& value);
  void set_finished_at(std::string&& value);
  void set_finished_at(const char* value);
  void set_finished_at(const char* value, size_t size);
  std::string* mutable_finished_at();
  std::string* release_finished_at();
  void set_allocated_finished_at(std::string* finished_at);
  private:
  const std::string& _internal_finished_at() const;
  void _internal_set_finished_at(const std::string& value);
  std::string* _internal_mutable_finished_at();
  public:

  // string msg = 10;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 core_num = 4;
  void clear_core_num();
  ::PROTOBUF_NAMESPACE_ID::int32 core_num() const;
  void set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_core_num() const;
  void _internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .TaskMessage.TaskStatus status = 8;
  void clear_status();
  ::TaskMessage_TaskStatus status() const;
  void set_status(::TaskMessage_TaskStatus value);
  private:
  ::TaskMessage_TaskStatus _internal_status() const;
  void _internal_set_status(::TaskMessage_TaskStatus value);
  public:

  // int32 id = 9;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TaskMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finished_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 core_num_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateResponse) */ {
 public:
  CreateResponse();
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const final {
    return CreateMaybeMessage<CreateResponse>(nullptr);
  }

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateResponse& from);
  void MergeFrom(const CreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CreateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListRequest) */ {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const final {
    return CreateMaybeMessage<ListRequest>(nullptr);
  }

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // int32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListResponse) */ {
 public:
  ListResponse();
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListResponse* New() const final {
    return CreateMaybeMessage<ListResponse>(nullptr);
  }

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .TaskMessage data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::TaskMessage* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskMessage >*
      mutable_data();
  private:
  const ::TaskMessage& _internal_data(int index) const;
  ::TaskMessage* _internal_add_data();
  public:
  const ::TaskMessage& data(int index) const;
  ::TaskMessage* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskMessage >&
      data() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskMessage > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class NameMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NameMessage) */ {
 public:
  NameMessage();
  virtual ~NameMessage();

  NameMessage(const NameMessage& from);
  NameMessage(NameMessage&& from) noexcept
    : NameMessage() {
    *this = ::std::move(from);
  }

  inline NameMessage& operator=(const NameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameMessage& operator=(NameMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameMessage* internal_default_instance() {
    return reinterpret_cast<const NameMessage*>(
               &_NameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NameMessage& a, NameMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NameMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameMessage* New() const final {
    return CreateMaybeMessage<NameMessage>(nullptr);
  }

  NameMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameMessage& from);
  void MergeFrom(const NameMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NameMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:NameMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DetailResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetailResponse) */ {
 public:
  DetailResponse();
  virtual ~DetailResponse();

  DetailResponse(const DetailResponse& from);
  DetailResponse(DetailResponse&& from) noexcept
    : DetailResponse() {
    *this = ::std::move(from);
  }

  inline DetailResponse& operator=(const DetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailResponse& operator=(DetailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailResponse* internal_default_instance() {
    return reinterpret_cast<const DetailResponse*>(
               &_DetailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DetailResponse& a, DetailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailResponse* New() const final {
    return CreateMaybeMessage<DetailResponse>(nullptr);
  }

  DetailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailResponse& from);
  void MergeFrom(const DetailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetailResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osier_5fserver_2eproto);
    return ::descriptor_table_osier_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kDataFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .TaskMessage data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TaskMessage& data() const;
  ::TaskMessage* release_data();
  ::TaskMessage* mutable_data();
  void set_allocated_data(::TaskMessage* data);
  private:
  const ::TaskMessage& _internal_data() const;
  ::TaskMessage* _internal_mutable_data();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DetailResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::TaskMessage* data_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osier_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerStatusResponse

// int32 core_num = 1;
inline void ServerStatusResponse::clear_core_num() {
  core_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerStatusResponse::_internal_core_num() const {
  return core_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerStatusResponse::core_num() const {
  // @@protoc_insertion_point(field_get:ServerStatusResponse.core_num)
  return _internal_core_num();
}
inline void ServerStatusResponse::_internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  core_num_ = value;
}
inline void ServerStatusResponse::set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_core_num(value);
  // @@protoc_insertion_point(field_set:ServerStatusResponse.core_num)
}

// int32 current_num = 2;
inline void ServerStatusResponse::clear_current_num() {
  current_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerStatusResponse::_internal_current_num() const {
  return current_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerStatusResponse::current_num() const {
  // @@protoc_insertion_point(field_get:ServerStatusResponse.current_num)
  return _internal_current_num();
}
inline void ServerStatusResponse::_internal_set_current_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_num_ = value;
}
inline void ServerStatusResponse::set_current_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_num(value);
  // @@protoc_insertion_point(field_set:ServerStatusResponse.current_num)
}

// int32 current_task = 3;
inline void ServerStatusResponse::clear_current_task() {
  current_task_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerStatusResponse::_internal_current_task() const {
  return current_task_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerStatusResponse::current_task() const {
  // @@protoc_insertion_point(field_get:ServerStatusResponse.current_task)
  return _internal_current_task();
}
inline void ServerStatusResponse::_internal_set_current_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_task_ = value;
}
inline void ServerStatusResponse::set_current_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_task(value);
  // @@protoc_insertion_point(field_set:ServerStatusResponse.current_task)
}

// -------------------------------------------------------------------

// EmptyMessage

// -------------------------------------------------------------------

// SimpleResponse

// bool status = 1;
inline void SimpleResponse::clear_status() {
  status_ = false;
}
inline bool SimpleResponse::_internal_status() const {
  return status_;
}
inline bool SimpleResponse::status() const {
  // @@protoc_insertion_point(field_get:SimpleResponse.status)
  return _internal_status();
}
inline void SimpleResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SimpleResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SimpleResponse.status)
}

// string msg = 2;
inline void SimpleResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimpleResponse::msg() const {
  // @@protoc_insertion_point(field_get:SimpleResponse.msg)
  return _internal_msg();
}
inline void SimpleResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:SimpleResponse.msg)
}
inline std::string* SimpleResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:SimpleResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& SimpleResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SimpleResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimpleResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SimpleResponse.msg)
}
inline void SimpleResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SimpleResponse.msg)
}
inline void SimpleResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SimpleResponse.msg)
}
inline std::string* SimpleResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimpleResponse::release_msg() {
  // @@protoc_insertion_point(field_release:SimpleResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:SimpleResponse.msg)
}

// -------------------------------------------------------------------

// CreateRequest

// string name = 1;
inline void CreateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRequest::name() const {
  // @@protoc_insertion_point(field_get:CreateRequest.name)
  return _internal_name();
}
inline void CreateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CreateRequest.name)
}
inline std::string* CreateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CreateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void CreateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRequest.name)
}
inline void CreateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRequest.name)
}
inline std::string* CreateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:CreateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CreateRequest.name)
}

// int32 priority = 2;
inline void CreateRequest::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::priority() const {
  // @@protoc_insertion_point(field_get:CreateRequest.priority)
  return _internal_priority();
}
inline void CreateRequest::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void CreateRequest::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CreateRequest.priority)
}

// string base_dir = 3;
inline void CreateRequest::clear_base_dir() {
  base_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRequest::base_dir() const {
  // @@protoc_insertion_point(field_get:CreateRequest.base_dir)
  return _internal_base_dir();
}
inline void CreateRequest::set_base_dir(const std::string& value) {
  _internal_set_base_dir(value);
  // @@protoc_insertion_point(field_set:CreateRequest.base_dir)
}
inline std::string* CreateRequest::mutable_base_dir() {
  // @@protoc_insertion_point(field_mutable:CreateRequest.base_dir)
  return _internal_mutable_base_dir();
}
inline const std::string& CreateRequest::_internal_base_dir() const {
  return base_dir_.GetNoArena();
}
inline void CreateRequest::_internal_set_base_dir(const std::string& value) {
  
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequest::set_base_dir(std::string&& value) {
  
  base_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRequest.base_dir)
}
inline void CreateRequest::set_base_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRequest.base_dir)
}
inline void CreateRequest::set_base_dir(const char* value, size_t size) {
  
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRequest.base_dir)
}
inline std::string* CreateRequest::_internal_mutable_base_dir() {
  
  return base_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequest::release_base_dir() {
  // @@protoc_insertion_point(field_release:CreateRequest.base_dir)
  
  return base_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_base_dir(std::string* base_dir) {
  if (base_dir != nullptr) {
    
  } else {
    
  }
  base_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_dir);
  // @@protoc_insertion_point(field_set_allocated:CreateRequest.base_dir)
}

// int32 core_num = 4;
inline void CreateRequest::clear_core_num() {
  core_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::_internal_core_num() const {
  return core_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRequest::core_num() const {
  // @@protoc_insertion_point(field_get:CreateRequest.core_num)
  return _internal_core_num();
}
inline void CreateRequest::_internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  core_num_ = value;
}
inline void CreateRequest::set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_core_num(value);
  // @@protoc_insertion_point(field_set:CreateRequest.core_num)
}

// string username = 5;
inline void CreateRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRequest::username() const {
  // @@protoc_insertion_point(field_get:CreateRequest.username)
  return _internal_username();
}
inline void CreateRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:CreateRequest.username)
}
inline std::string* CreateRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:CreateRequest.username)
  return _internal_mutable_username();
}
inline const std::string& CreateRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void CreateRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRequest.username)
}
inline void CreateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRequest.username)
}
inline void CreateRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRequest.username)
}
inline std::string* CreateRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRequest::release_username() {
  // @@protoc_insertion_point(field_release:CreateRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CreateRequest.username)
}

// -------------------------------------------------------------------

// TaskMessage

// string name = 1;
inline void TaskMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskMessage::name() const {
  // @@protoc_insertion_point(field_get:TaskMessage.name)
  return _internal_name();
}
inline void TaskMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TaskMessage.name)
}
inline std::string* TaskMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TaskMessage.name)
  return _internal_mutable_name();
}
inline const std::string& TaskMessage::_internal_name() const {
  return name_.GetNoArena();
}
inline void TaskMessage::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskMessage::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskMessage.name)
}
inline void TaskMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMessage.name)
}
inline void TaskMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMessage.name)
}
inline std::string* TaskMessage::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskMessage::release_name() {
  // @@protoc_insertion_point(field_release:TaskMessage.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TaskMessage.name)
}

// int32 priority = 2;
inline void TaskMessage::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskMessage::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskMessage::priority() const {
  // @@protoc_insertion_point(field_get:TaskMessage.priority)
  return _internal_priority();
}
inline void TaskMessage::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void TaskMessage::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:TaskMessage.priority)
}

// string base_dir = 3;
inline void TaskMessage::clear_base_dir() {
  base_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskMessage::base_dir() const {
  // @@protoc_insertion_point(field_get:TaskMessage.base_dir)
  return _internal_base_dir();
}
inline void TaskMessage::set_base_dir(const std::string& value) {
  _internal_set_base_dir(value);
  // @@protoc_insertion_point(field_set:TaskMessage.base_dir)
}
inline std::string* TaskMessage::mutable_base_dir() {
  // @@protoc_insertion_point(field_mutable:TaskMessage.base_dir)
  return _internal_mutable_base_dir();
}
inline const std::string& TaskMessage::_internal_base_dir() const {
  return base_dir_.GetNoArena();
}
inline void TaskMessage::_internal_set_base_dir(const std::string& value) {
  
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskMessage::set_base_dir(std::string&& value) {
  
  base_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskMessage.base_dir)
}
inline void TaskMessage::set_base_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMessage.base_dir)
}
inline void TaskMessage::set_base_dir(const char* value, size_t size) {
  
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMessage.base_dir)
}
inline std::string* TaskMessage::_internal_mutable_base_dir() {
  
  return base_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskMessage::release_base_dir() {
  // @@protoc_insertion_point(field_release:TaskMessage.base_dir)
  
  return base_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMessage::set_allocated_base_dir(std::string* base_dir) {
  if (base_dir != nullptr) {
    
  } else {
    
  }
  base_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_dir);
  // @@protoc_insertion_point(field_set_allocated:TaskMessage.base_dir)
}

// int32 core_num = 4;
inline void TaskMessage::clear_core_num() {
  core_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskMessage::_internal_core_num() const {
  return core_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskMessage::core_num() const {
  // @@protoc_insertion_point(field_get:TaskMessage.core_num)
  return _internal_core_num();
}
inline void TaskMessage::_internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  core_num_ = value;
}
inline void TaskMessage::set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_core_num(value);
  // @@protoc_insertion_point(field_set:TaskMessage.core_num)
}

// string username = 5;
inline void TaskMessage::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskMessage::username() const {
  // @@protoc_insertion_point(field_get:TaskMessage.username)
  return _internal_username();
}
inline void TaskMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:TaskMessage.username)
}
inline std::string* TaskMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:TaskMessage.username)
  return _internal_mutable_username();
}
inline const std::string& TaskMessage::_internal_username() const {
  return username_.GetNoArena();
}
inline void TaskMessage::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskMessage::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskMessage.username)
}
inline void TaskMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMessage.username)
}
inline void TaskMessage::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMessage.username)
}
inline std::string* TaskMessage::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskMessage::release_username() {
  // @@protoc_insertion_point(field_release:TaskMessage.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TaskMessage.username)
}

// string created_at = 6;
inline void TaskMessage::clear_created_at() {
  created_at_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskMessage::created_at() const {
  // @@protoc_insertion_point(field_get:TaskMessage.created_at)
  return _internal_created_at();
}
inline void TaskMessage::set_created_at(const std::string& value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:TaskMessage.created_at)
}
inline std::string* TaskMessage::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:TaskMessage.created_at)
  return _internal_mutable_created_at();
}
inline const std::string& TaskMessage::_internal_created_at() const {
  return created_at_.GetNoArena();
}
inline void TaskMessage::_internal_set_created_at(const std::string& value) {
  
  created_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskMessage::set_created_at(std::string&& value) {
  
  created_at_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskMessage.created_at)
}
inline void TaskMessage::set_created_at(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMessage.created_at)
}
inline void TaskMessage::set_created_at(const char* value, size_t size) {
  
  created_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMessage.created_at)
}
inline std::string* TaskMessage::_internal_mutable_created_at() {
  
  return created_at_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskMessage::release_created_at() {
  // @@protoc_insertion_point(field_release:TaskMessage.created_at)
  
  return created_at_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMessage::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_at);
  // @@protoc_insertion_point(field_set_allocated:TaskMessage.created_at)
}

// string finished_at = 7;
inline void TaskMessage::clear_finished_at() {
  finished_at_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskMessage::finished_at() const {
  // @@protoc_insertion_point(field_get:TaskMessage.finished_at)
  return _internal_finished_at();
}
inline void TaskMessage::set_finished_at(const std::string& value) {
  _internal_set_finished_at(value);
  // @@protoc_insertion_point(field_set:TaskMessage.finished_at)
}
inline std::string* TaskMessage::mutable_finished_at() {
  // @@protoc_insertion_point(field_mutable:TaskMessage.finished_at)
  return _internal_mutable_finished_at();
}
inline const std::string& TaskMessage::_internal_finished_at() const {
  return finished_at_.GetNoArena();
}
inline void TaskMessage::_internal_set_finished_at(const std::string& value) {
  
  finished_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskMessage::set_finished_at(std::string&& value) {
  
  finished_at_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskMessage.finished_at)
}
inline void TaskMessage::set_finished_at(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  finished_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMessage.finished_at)
}
inline void TaskMessage::set_finished_at(const char* value, size_t size) {
  
  finished_at_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMessage.finished_at)
}
inline std::string* TaskMessage::_internal_mutable_finished_at() {
  
  return finished_at_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskMessage::release_finished_at() {
  // @@protoc_insertion_point(field_release:TaskMessage.finished_at)
  
  return finished_at_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMessage::set_allocated_finished_at(std::string* finished_at) {
  if (finished_at != nullptr) {
    
  } else {
    
  }
  finished_at_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finished_at);
  // @@protoc_insertion_point(field_set_allocated:TaskMessage.finished_at)
}

// .TaskMessage.TaskStatus status = 8;
inline void TaskMessage::clear_status() {
  status_ = 0;
}
inline ::TaskMessage_TaskStatus TaskMessage::_internal_status() const {
  return static_cast< ::TaskMessage_TaskStatus >(status_);
}
inline ::TaskMessage_TaskStatus TaskMessage::status() const {
  // @@protoc_insertion_point(field_get:TaskMessage.status)
  return _internal_status();
}
inline void TaskMessage::_internal_set_status(::TaskMessage_TaskStatus value) {
  
  status_ = value;
}
inline void TaskMessage::set_status(::TaskMessage_TaskStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:TaskMessage.status)
}

// int32 id = 9;
inline void TaskMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskMessage::id() const {
  // @@protoc_insertion_point(field_get:TaskMessage.id)
  return _internal_id();
}
inline void TaskMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TaskMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TaskMessage.id)
}

// string msg = 10;
inline void TaskMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TaskMessage::msg() const {
  // @@protoc_insertion_point(field_get:TaskMessage.msg)
  return _internal_msg();
}
inline void TaskMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:TaskMessage.msg)
}
inline std::string* TaskMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:TaskMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& TaskMessage::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void TaskMessage::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskMessage::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TaskMessage.msg)
}
inline void TaskMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMessage.msg)
}
inline void TaskMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMessage.msg)
}
inline std::string* TaskMessage::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskMessage::release_msg() {
  // @@protoc_insertion_point(field_release:TaskMessage.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:TaskMessage.msg)
}

// -------------------------------------------------------------------

// CreateResponse

// bool status = 1;
inline void CreateResponse::clear_status() {
  status_ = false;
}
inline bool CreateResponse::_internal_status() const {
  return status_;
}
inline bool CreateResponse::status() const {
  // @@protoc_insertion_point(field_get:CreateResponse.status)
  return _internal_status();
}
inline void CreateResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CreateResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CreateResponse.status)
}

// -------------------------------------------------------------------

// ListRequest

// int32 start = 1;
inline void ListRequest::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::start() const {
  // @@protoc_insertion_point(field_get:ListRequest.start)
  return _internal_start();
}
inline void ListRequest::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void ListRequest::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:ListRequest.start)
}

// int32 end = 2;
inline void ListRequest::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListRequest::end() const {
  // @@protoc_insertion_point(field_get:ListRequest.end)
  return _internal_end();
}
inline void ListRequest::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void ListRequest::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:ListRequest.end)
}

// -------------------------------------------------------------------

// ListResponse

// bool status = 1;
inline void ListResponse::clear_status() {
  status_ = false;
}
inline bool ListResponse::_internal_status() const {
  return status_;
}
inline bool ListResponse::status() const {
  // @@protoc_insertion_point(field_get:ListResponse.status)
  return _internal_status();
}
inline void ListResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ListResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ListResponse.status)
}

// string msg = 2;
inline void ListResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListResponse::msg() const {
  // @@protoc_insertion_point(field_get:ListResponse.msg)
  return _internal_msg();
}
inline void ListResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:ListResponse.msg)
}
inline std::string* ListResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ListResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& ListResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ListResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListResponse.msg)
}
inline void ListResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListResponse.msg)
}
inline void ListResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListResponse.msg)
}
inline std::string* ListResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListResponse::release_msg() {
  // @@protoc_insertion_point(field_release:ListResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ListResponse.msg)
}

// repeated .TaskMessage data = 3;
inline int ListResponse::_internal_data_size() const {
  return data_.size();
}
inline int ListResponse::data_size() const {
  return _internal_data_size();
}
inline void ListResponse::clear_data() {
  data_.Clear();
}
inline ::TaskMessage* ListResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ListResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskMessage >*
ListResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ListResponse.data)
  return &data_;
}
inline const ::TaskMessage& ListResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::TaskMessage& ListResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:ListResponse.data)
  return _internal_data(index);
}
inline ::TaskMessage* ListResponse::_internal_add_data() {
  return data_.Add();
}
inline ::TaskMessage* ListResponse::add_data() {
  // @@protoc_insertion_point(field_add:ListResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TaskMessage >&
ListResponse::data() const {
  // @@protoc_insertion_point(field_list:ListResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// NameMessage

// string name = 1;
inline void NameMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameMessage::name() const {
  // @@protoc_insertion_point(field_get:NameMessage.name)
  return _internal_name();
}
inline void NameMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NameMessage.name)
}
inline std::string* NameMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NameMessage.name)
  return _internal_mutable_name();
}
inline const std::string& NameMessage::_internal_name() const {
  return name_.GetNoArena();
}
inline void NameMessage::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameMessage::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NameMessage.name)
}
inline void NameMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NameMessage.name)
}
inline void NameMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NameMessage.name)
}
inline std::string* NameMessage::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameMessage::release_name() {
  // @@protoc_insertion_point(field_release:NameMessage.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NameMessage.name)
}

// -------------------------------------------------------------------

// DetailResponse

// bool status = 1;
inline void DetailResponse::clear_status() {
  status_ = false;
}
inline bool DetailResponse::_internal_status() const {
  return status_;
}
inline bool DetailResponse::status() const {
  // @@protoc_insertion_point(field_get:DetailResponse.status)
  return _internal_status();
}
inline void DetailResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DetailResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DetailResponse.status)
}

// string msg = 2;
inline void DetailResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetailResponse::msg() const {
  // @@protoc_insertion_point(field_get:DetailResponse.msg)
  return _internal_msg();
}
inline void DetailResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:DetailResponse.msg)
}
inline std::string* DetailResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:DetailResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& DetailResponse::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void DetailResponse::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DetailResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DetailResponse.msg)
}
inline void DetailResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DetailResponse.msg)
}
inline void DetailResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DetailResponse.msg)
}
inline std::string* DetailResponse::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetailResponse::release_msg() {
  // @@protoc_insertion_point(field_release:DetailResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetailResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:DetailResponse.msg)
}

// .TaskMessage data = 3;
inline bool DetailResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool DetailResponse::has_data() const {
  return _internal_has_data();
}
inline void DetailResponse::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::TaskMessage& DetailResponse::_internal_data() const {
  const ::TaskMessage* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TaskMessage*>(
      &::_TaskMessage_default_instance_);
}
inline const ::TaskMessage& DetailResponse::data() const {
  // @@protoc_insertion_point(field_get:DetailResponse.data)
  return _internal_data();
}
inline ::TaskMessage* DetailResponse::release_data() {
  // @@protoc_insertion_point(field_release:DetailResponse.data)
  
  ::TaskMessage* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::TaskMessage* DetailResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TaskMessage>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::TaskMessage* DetailResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DetailResponse.data)
  return _internal_mutable_data();
}
inline void DetailResponse::set_allocated_data(::TaskMessage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DetailResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TaskMessage_TaskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskMessage_TaskStatus>() {
  return ::TaskMessage_TaskStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osier_5fserver_2eproto
