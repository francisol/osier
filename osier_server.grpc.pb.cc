// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: osier_server.proto

#include "osier_server.pb.h"
#include "osier_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* OsierServer_method_names[] = {
  "/OsierServer/create",
  "/OsierServer/list",
  "/OsierServer/restart",
  "/OsierServer/remove",
  "/OsierServer/detail",
  "/OsierServer/serverStatus",
};

std::unique_ptr< OsierServer::Stub> OsierServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OsierServer::Stub> stub(new OsierServer::Stub(channel));
  return stub;
}

OsierServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_create_(OsierServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_(OsierServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_restart_(OsierServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remove_(OsierServer_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_detail_(OsierServer_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_serverStatus_(OsierServer_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OsierServer::Stub::create(::grpc::ClientContext* context, const ::CreateRequest& request, ::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_create_, context, request, response);
}

void OsierServer::Stub::experimental_async::create(::grpc::ClientContext* context, const ::CreateRequest* request, ::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::create(::grpc::ClientContext* context, const ::CreateRequest* request, ::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

void OsierServer::Stub::experimental_async::create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SimpleResponse>* OsierServer::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SimpleResponse>* OsierServer::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_create_, context, request, false);
}

::grpc::Status OsierServer::Stub::list(::grpc::ClientContext* context, const ::ListRequest& request, ::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_, context, request, response);
}

void OsierServer::Stub::experimental_async::list(::grpc::ClientContext* context, const ::ListRequest* request, ::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::list(::grpc::ClientContext* context, const ::ListRequest* request, ::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_list_, context, request, response, reactor);
}

void OsierServer::Stub::experimental_async::list(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_list_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ListResponse>* OsierServer::Stub::AsynclistRaw(::grpc::ClientContext* context, const ::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ListResponse>::Create(channel_.get(), cq, rpcmethod_list_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ListResponse>* OsierServer::Stub::PrepareAsynclistRaw(::grpc::ClientContext* context, const ::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ListResponse>::Create(channel_.get(), cq, rpcmethod_list_, context, request, false);
}

::grpc::Status OsierServer::Stub::restart(::grpc::ClientContext* context, const ::NameMessage& request, ::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_restart_, context, request, response);
}

void OsierServer::Stub::experimental_async::restart(::grpc::ClientContext* context, const ::NameMessage* request, ::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_restart_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::restart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_restart_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::restart(::grpc::ClientContext* context, const ::NameMessage* request, ::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_restart_, context, request, response, reactor);
}

void OsierServer::Stub::experimental_async::restart(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_restart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SimpleResponse>* OsierServer::Stub::AsyncrestartRaw(::grpc::ClientContext* context, const ::NameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_restart_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SimpleResponse>* OsierServer::Stub::PrepareAsyncrestartRaw(::grpc::ClientContext* context, const ::NameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_restart_, context, request, false);
}

::grpc::Status OsierServer::Stub::remove(::grpc::ClientContext* context, const ::NameMessage& request, ::SimpleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_remove_, context, request, response);
}

void OsierServer::Stub::experimental_async::remove(::grpc::ClientContext* context, const ::NameMessage* request, ::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_remove_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimpleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_remove_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::remove(::grpc::ClientContext* context, const ::NameMessage* request, ::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_remove_, context, request, response, reactor);
}

void OsierServer::Stub::experimental_async::remove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::SimpleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SimpleResponse>* OsierServer::Stub::AsyncremoveRaw(::grpc::ClientContext* context, const ::NameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_remove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SimpleResponse>* OsierServer::Stub::PrepareAsyncremoveRaw(::grpc::ClientContext* context, const ::NameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::SimpleResponse>::Create(channel_.get(), cq, rpcmethod_remove_, context, request, false);
}

::grpc::Status OsierServer::Stub::detail(::grpc::ClientContext* context, const ::NameMessage& request, ::DetailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_detail_, context, request, response);
}

void OsierServer::Stub::experimental_async::detail(::grpc::ClientContext* context, const ::NameMessage* request, ::DetailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detail_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::detail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DetailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_detail_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::detail(::grpc::ClientContext* context, const ::NameMessage* request, ::DetailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detail_, context, request, response, reactor);
}

void OsierServer::Stub::experimental_async::detail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DetailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_detail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DetailResponse>* OsierServer::Stub::AsyncdetailRaw(::grpc::ClientContext* context, const ::NameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DetailResponse>::Create(channel_.get(), cq, rpcmethod_detail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DetailResponse>* OsierServer::Stub::PrepareAsyncdetailRaw(::grpc::ClientContext* context, const ::NameMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DetailResponse>::Create(channel_.get(), cq, rpcmethod_detail_, context, request, false);
}

::grpc::Status OsierServer::Stub::serverStatus(::grpc::ClientContext* context, const ::EmptyMessage& request, ::ServerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_serverStatus_, context, request, response);
}

void OsierServer::Stub::experimental_async::serverStatus(::grpc::ClientContext* context, const ::EmptyMessage* request, ::ServerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_serverStatus_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::serverStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_serverStatus_, context, request, response, std::move(f));
}

void OsierServer::Stub::experimental_async::serverStatus(::grpc::ClientContext* context, const ::EmptyMessage* request, ::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_serverStatus_, context, request, response, reactor);
}

void OsierServer::Stub::experimental_async::serverStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ServerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_serverStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerStatusResponse>* OsierServer::Stub::AsyncserverStatusRaw(::grpc::ClientContext* context, const ::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ServerStatusResponse>::Create(channel_.get(), cq, rpcmethod_serverStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ServerStatusResponse>* OsierServer::Stub::PrepareAsyncserverStatusRaw(::grpc::ClientContext* context, const ::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ServerStatusResponse>::Create(channel_.get(), cq, rpcmethod_serverStatus_, context, request, false);
}

OsierServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsierServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsierServer::Service, ::CreateRequest, ::SimpleResponse>(
          std::mem_fn(&OsierServer::Service::create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsierServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsierServer::Service, ::ListRequest, ::ListResponse>(
          std::mem_fn(&OsierServer::Service::list), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsierServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsierServer::Service, ::NameMessage, ::SimpleResponse>(
          std::mem_fn(&OsierServer::Service::restart), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsierServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsierServer::Service, ::NameMessage, ::SimpleResponse>(
          std::mem_fn(&OsierServer::Service::remove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsierServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsierServer::Service, ::NameMessage, ::DetailResponse>(
          std::mem_fn(&OsierServer::Service::detail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OsierServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OsierServer::Service, ::EmptyMessage, ::ServerStatusResponse>(
          std::mem_fn(&OsierServer::Service::serverStatus), this)));
}

OsierServer::Service::~Service() {
}

::grpc::Status OsierServer::Service::create(::grpc::ServerContext* context, const ::CreateRequest* request, ::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsierServer::Service::list(::grpc::ServerContext* context, const ::ListRequest* request, ::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsierServer::Service::restart(::grpc::ServerContext* context, const ::NameMessage* request, ::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsierServer::Service::remove(::grpc::ServerContext* context, const ::NameMessage* request, ::SimpleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsierServer::Service::detail(::grpc::ServerContext* context, const ::NameMessage* request, ::DetailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OsierServer::Service::serverStatus(::grpc::ServerContext* context, const ::EmptyMessage* request, ::ServerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


